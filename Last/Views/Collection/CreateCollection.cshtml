@using LogicLayer.Enums
@using LogicLayer.ViewModels
@model LogicLayer.ViewModels.CollectionViewModel

@{
    ViewBag.Title = "CreateCollection";
    Layout = "~/Views/Shared/_LayoutProfile.cshtml";
}



@using (Html.BeginForm("CreateCollection", "Collection"))
{

    <div class="form-horizontal">
        @Html.HiddenFor(model => model.ImageUrl)
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.CollectionCreatorId)
        <div class="form-group">
            @Html.LabelFor(model => model.CollectionName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CollectionName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CollectionName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CollectionDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea class="form-control" id="CollectionDescription" name="CollectionDescription" rows="3"></textarea>
                @Html.ValidationMessageFor(model => model.CollectionDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CollectionType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CollectionType,
                    new SelectList(Enum.GetValues(typeof(CollectionTypes))))
                @Html.ValidationMessageFor(model => model.CollectionDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Resources.Resources.create" id="createbtn" name="createbtn" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div id="drop-area" class="form-group">
    <form class="my-form">
        <p>@Resources.Resources.dragndrop</p>
        <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
        <label class="button" for="fileElem">@Resources.Resources.select_image</label>
    </form>
</div>



<script>

    let dropArea = document.getElementById('drop-area');
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)
    })

    function preventDefaults(e) {
        e.preventDefault()
        e.stopPropagation()
    }

    ;['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
    })
        ;['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false)
        })
    function highlight(e) {
        dropArea.classList.add('highlight')
    }
    function unhighlight(e) {
        dropArea.classList.remove('highlight')
    }

    dropArea.addEventListener('drop', handleDrop, false)
    function handleDrop(e) {
        let dt = e.dataTransfer
        let files = dt.files
        handleFiles(files)

    }

    function handleFiles(files) {
        ([...files]).forEach(uploadFile)
    }


    const cloudName = 'ipr9n';
    const unsignedUploadPreset = 'mp8fevzi';

    function uploadFile(file) {
        var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;
        var xhr = new XMLHttpRequest();
        var fd = new FormData();
        xhr.open('POST', url, true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        document.getElementById('createbtn').disabled = true;

        xhr.onreadystatechange = function (e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
                var response = JSON.parse(xhr.responseText);

                var url = response.secure_url;
                $("#ImageUrl").val(url);
                document.getElementById('createbtn').disabled = false;
            }
        };
        fd.append('upload_preset', unsignedUploadPreset);
        fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary
        fd.append('file', file);
        xhr.send(fd);

    }

</script>